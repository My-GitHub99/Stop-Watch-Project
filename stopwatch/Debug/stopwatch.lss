
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000556  2**0
                  ALLOC
  2 .stab         00000a14  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000894  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	0e 94 af 01 	call	0x35e	; 0x35e <externalInterruptConfig>
  88:	0e 94 9a 01 	call	0x334	; 0x334 <sevenSegemntConfig>
  8c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <timer1_Config>
  90:	0e 94 36 02 	call	0x46c	; 0x46c <timer0_Config>
  94:	0e 94 09 02 	call	0x412	; 0x412 <timer1_Start>
  98:	0e 94 52 02 	call	0x4a4	; 0x4a4 <resetClockDisplayCounts>
  9c:	80 91 60 00 	lds	r24, 0x0060
  a0:	0e 94 21 02 	call	0x442	; 0x442 <segmentDisplay>
  a4:	fb cf       	rjmp	.-10     	; 0x9c <main+0x20>

000000a6 <__vector_1>:

	}
}
// Reset Clock Count
ISR (INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	 resetClockDisplayCounts();
  d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <resetClockDisplayCounts>

}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:
// Pause Clock
ISR (INT1_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	timer1_Stop();
 124:	0e 94 17 02 	call	0x42e	; 0x42e <timer1_Stop>
}
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_3>:
// Resume Clock
ISR(INT2_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	timer1_Config();
 178:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <timer1_Config>
	timer1_Start();
 17c:	0e 94 09 02 	call	0x412	; 0x412 <timer1_Start>
}
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_11>:

// Clock refresh frequency 200hz (Happens Every 2ms)
ISR(TIMER0_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	sei();
 1ca:	78 94       	sei
    PORTA&=~(1<<mutliplexSwitch);
 1cc:	ab e3       	ldi	r26, 0x3B	; 59
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	eb e3       	ldi	r30, 0x3B	; 59
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	80 91 61 00 	lds	r24, 0x0061
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_11+0x46>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <__vector_11+0x42>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
		if(mutliplexSwitch<6)
 1f6:	80 91 61 00 	lds	r24, 0x0061
 1fa:	86 30       	cpi	r24, 0x06	; 6
 1fc:	30 f4       	brcc	.+12     	; 0x20a <__vector_11+0x64>
		{
		mutliplexSwitch++;
 1fe:	80 91 61 00 	lds	r24, 0x0061
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 61 00 	sts	0x0061, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <__vector_11+0x68>
		}
		else
		{
		mutliplexSwitch=0;
 20a:	10 92 61 00 	sts	0x0061, r1
		}
	currentSevenSegementDisplay=segmentsValue[mutliplexSwitch];
 20e:	80 91 61 00 	lds	r24, 0x0061
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	ee 59       	subi	r30, 0x9E	; 158
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	80 81       	ld	r24, Z
 21e:	80 93 60 00 	sts	0x0060, r24
	PORTA=(1<<mutliplexSwitch);
 222:	eb e3       	ldi	r30, 0x3B	; 59
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 91 61 00 	lds	r24, 0x0061
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <__vector_11+0x92>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <__vector_11+0x8e>
 23c:	80 83       	st	Z, r24
	}
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_7>:


// Counting Logic happens every 1 second
ISR(TIMER1_COMPA_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	sei();
 288:	78 94       	sei
	segmentsValue[0]++;
 28a:	80 91 62 00 	lds	r24, 0x0062
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 62 00 	sts	0x0062, r24
	if (segmentsValue[0]==10)
 294:	80 91 62 00 	lds	r24, 0x0062
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	39 f4       	brne	.+14     	; 0x2aa <__vector_7+0x4c>
	{
		segmentsValue[1]++;
 29c:	80 91 63 00 	lds	r24, 0x0063
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 63 00 	sts	0x0063, r24
		segmentsValue[0]=0;
 2a6:	10 92 62 00 	sts	0x0062, r1
	}
	// 60 seconds
	if (segmentsValue[1]== 6)
 2aa:	80 91 63 00 	lds	r24, 0x0063
 2ae:	86 30       	cpi	r24, 0x06	; 6
 2b0:	39 f4       	brne	.+14     	; 0x2c0 <__vector_7+0x62>
	{
		segmentsValue[1]=0;
 2b2:	10 92 63 00 	sts	0x0063, r1
		segmentsValue[2]++;
 2b6:	80 91 64 00 	lds	r24, 0x0064
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 64 00 	sts	0x0064, r24
	}

	if(segmentsValue[2]==10)
 2c0:	80 91 64 00 	lds	r24, 0x0064
 2c4:	8a 30       	cpi	r24, 0x0A	; 10
 2c6:	39 f4       	brne	.+14     	; 0x2d6 <__vector_7+0x78>
	{
		segmentsValue[2]=0;
 2c8:	10 92 64 00 	sts	0x0064, r1
		segmentsValue[3]++;
 2cc:	80 91 65 00 	lds	r24, 0x0065
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 65 00 	sts	0x0065, r24
	}

	if(segmentsValue[3]==6)
 2d6:	80 91 65 00 	lds	r24, 0x0065
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	39 f4       	brne	.+14     	; 0x2ec <__vector_7+0x8e>
	{
		segmentsValue[4]++;
 2de:	80 91 66 00 	lds	r24, 0x0066
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 66 00 	sts	0x0066, r24
		segmentsValue[3]=0;
 2e8:	10 92 65 00 	sts	0x0065, r1
	}
	if(segmentsValue[4]==10)
 2ec:	80 91 66 00 	lds	r24, 0x0066
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	39 f4       	brne	.+14     	; 0x302 <__vector_7+0xa4>
	{
		segmentsValue[4]=0;
 2f4:	10 92 66 00 	sts	0x0066, r1
		segmentsValue[5]++;
 2f8:	80 91 67 00 	lds	r24, 0x0067
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 67 00 	sts	0x0067, r24
	}
	if(segmentsValue[5]==10)
 302:	80 91 67 00 	lds	r24, 0x0067
 306:	8a 30       	cpi	r24, 0x0A	; 10
 308:	11 f4       	brne	.+4      	; 0x30e <__vector_7+0xb0>
	{
		 resetClockDisplayCounts();
 30a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <resetClockDisplayCounts>
	}

}
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <sevenSegemntConfig>:
// Global Variables
extern uint8 segmentsValue[6];


void sevenSegemntConfig(void)
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	// Decoder Pins
	DDRC|=0x0F; // enable first four pins in port C as output
 33c:	a4 e3       	ldi	r26, 0x34	; 52
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e4 e3       	ldi	r30, 0x34	; 52
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8f 60       	ori	r24, 0x0F	; 15
 348:	8c 93       	st	X, r24
	// BJT enable pins
	DDRA|= 0x3F; // enable first 6 pins in Port A as output
 34a:	aa e3       	ldi	r26, 0x3A	; 58
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	ea e3       	ldi	r30, 0x3A	; 58
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8f 63       	ori	r24, 0x3F	; 63
 356:	8c 93       	st	X, r24
}
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <externalInterruptConfig>:


void externalInterruptConfig(void)
{
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	// Intrrupt enable
		SREG|=(1<<7); // global entrrupt enable
 366:	af e5       	ldi	r26, 0x5F	; 95
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	ef e5       	ldi	r30, 0x5F	; 95
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 68       	ori	r24, 0x80	; 128
 372:	8c 93       	st	X, r24
		GICR|=(0x07<<5); // enable interrupts INT0,1,2 in interrupt module
 374:	ab e5       	ldi	r26, 0x5B	; 91
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	eb e5       	ldi	r30, 0x5B	; 91
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 6e       	ori	r24, 0xE0	; 224
 380:	8c 93       	st	X, r24
		MCUCR|=(1<<ISC01) | (1<<ISC10) | (1<<ISC11); // set interrupt sense, falling edge for INRT0 and  rasing edge for INT1
 382:	a5 e5       	ldi	r26, 0x55	; 85
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e5 e5       	ldi	r30, 0x55	; 85
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	8e 60       	ori	r24, 0x0E	; 14
 38e:	8c 93       	st	X, r24
		MCUCSR&=~(1<<6); // set interrupt sense for INT2 to falling edge
 390:	a4 e5       	ldi	r26, 0x54	; 84
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	e4 e5       	ldi	r30, 0x54	; 84
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8f 7b       	andi	r24, 0xBF	; 191
 39c:	8c 93       	st	X, r24
		DDRD&=~ ((1<<2) | (1<<3)); // set pins 2 and 3 in port D as input for interupts INT0,1
 39e:	a1 e3       	ldi	r26, 0x31	; 49
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e1 e3       	ldi	r30, 0x31	; 49
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	83 7f       	andi	r24, 0xF3	; 243
 3aa:	8c 93       	st	X, r24
		DDRB&=~(1<<2); // set pins 2 in port B for intrupts INT2
 3ac:	a7 e3       	ldi	r26, 0x37	; 55
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e7 e3       	ldi	r30, 0x37	; 55
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	8c 93       	st	X, r24
}
 3ba:	cf 91       	pop	r28
 3bc:	df 91       	pop	r29
 3be:	08 95       	ret

000003c0 <timer1_Config>:

void timer1_Config(void)
{
 3c0:	df 93       	push	r29
 3c2:	cf 93       	push	r28
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A|= (1<<FOC1A); //setting non PWM mode
 3c8:	af e4       	ldi	r26, 0x4F	; 79
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	ef e4       	ldi	r30, 0x4F	; 79
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	8c 93       	st	X, r24
	TCCR1B|=(1<<WGM12); // setting CTC mode
 3d6:	ae e4       	ldi	r26, 0x4E	; 78
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	ee e4       	ldi	r30, 0x4E	; 78
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	8c 93       	st	X, r24
	TIMSK|=(1<<OCIE1A);// enable module compare interupt
 3e4:	a9 e5       	ldi	r26, 0x59	; 89
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e9 e5       	ldi	r30, 0x59	; 89
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	8c 93       	st	X, r24
	OCR1A=977; // compare match value for 1 second
 3f2:	ea e4       	ldi	r30, 0x4A	; 74
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	81 ed       	ldi	r24, 0xD1	; 209
 3f8:	93 e0       	ldi	r25, 0x03	; 3
 3fa:	91 83       	std	Z+1, r25	; 0x01
 3fc:	80 83       	st	Z, r24
	SREG|=(1<<7);
 3fe:	af e5       	ldi	r26, 0x5F	; 95
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	ef e5       	ldi	r30, 0x5F	; 95
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	8c 93       	st	X, r24
}
 40c:	cf 91       	pop	r28
 40e:	df 91       	pop	r29
 410:	08 95       	ret

00000412 <timer1_Start>:


void timer1_Start(void)
{
 412:	df 93       	push	r29
 414:	cf 93       	push	r28
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	TCCR1B|=(1<<CS12) | (1<<CS10); // set prescaler to 1024, start timer
 41a:	ae e4       	ldi	r26, 0x4E	; 78
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	ee e4       	ldi	r30, 0x4E	; 78
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	85 60       	ori	r24, 0x05	; 5
 426:	8c 93       	st	X, r24
}
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <timer1_Stop>:

void timer1_Stop(void)
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0x00; // set prescaler to 1024, start timer
 436:	ee e4       	ldi	r30, 0x4E	; 78
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	10 82       	st	Z, r1
}
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <segmentDisplay>:



void segmentDisplay(uint8 currentCount)
{
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	0f 92       	push	r0
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	89 83       	std	Y+1, r24	; 0x01

 PORTC=(PORTC & 0xC0)| (currentCount & 0x3F);
 44e:	a5 e3       	ldi	r26, 0x35	; 53
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e5 e3       	ldi	r30, 0x35	; 53
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	98 2f       	mov	r25, r24
 45a:	90 7c       	andi	r25, 0xC0	; 192
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	8f 73       	andi	r24, 0x3F	; 63
 460:	89 2b       	or	r24, r25
 462:	8c 93       	st	X, r24
 }
 464:	0f 90       	pop	r0
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <timer0_Config>:

void timer0_Config(void)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62

	TCNT0=0;
 474:	e2 e5       	ldi	r30, 0x52	; 82
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	10 82       	st	Z, r1
	TCCR0=(1<<FOC0) | (1<<CS01);
 47a:	e3 e5       	ldi	r30, 0x53	; 83
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	82 e8       	ldi	r24, 0x82	; 130
 480:	80 83       	st	Z, r24
	TIMSK|=(1<<TOIE0);
 482:	a9 e5       	ldi	r26, 0x59	; 89
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e9 e5       	ldi	r30, 0x59	; 89
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	8c 93       	st	X, r24
	SREG|=(1<<7);
 490:	af e5       	ldi	r26, 0x5F	; 95
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	ef e5       	ldi	r30, 0x5F	; 95
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	8c 93       	st	X, r24

}
 49e:	cf 91       	pop	r28
 4a0:	df 91       	pop	r29
 4a2:	08 95       	ret

000004a4 <resetClockDisplayCounts>:

void resetClockDisplayCounts(void)
{
 4a4:	df 93       	push	r29
 4a6:	cf 93       	push	r28
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <resetClockDisplayCounts+0x6>
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	for(int i=0;i<6;i++)
 4ae:	1a 82       	std	Y+2, r1	; 0x02
 4b0:	19 82       	std	Y+1, r1	; 0x01
 4b2:	0b c0       	rjmp	.+22     	; 0x4ca <resetClockDisplayCounts+0x26>
		{
			segmentsValue[i]=0;
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	fc 01       	movw	r30, r24
 4ba:	ee 59       	subi	r30, 0x9E	; 158
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	10 82       	st	Z, r1

}

void resetClockDisplayCounts(void)
{
	for(int i=0;i<6;i++)
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	9a 83       	std	Y+2, r25	; 0x02
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	86 30       	cpi	r24, 0x06	; 6
 4d0:	91 05       	cpc	r25, r1
 4d2:	84 f3       	brlt	.-32     	; 0x4b4 <resetClockDisplayCounts+0x10>
		{
			segmentsValue[i]=0;
		}
}
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	cf 91       	pop	r28
 4da:	df 91       	pop	r29
 4dc:	08 95       	ret

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
